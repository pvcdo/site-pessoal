<h2 id="secao9-sequelize">Seção 9 - Utilizando o Sequelize no Node.js</h2>

<h3>Introdução</h3>

<p>É uma framework para simplificar as queries sql.</p>

<h3>O que é uma ORM</h3>

<p>O sequelize é considerado uma ORM (Object Relational Mapper - Mapeamento relacional de objetos) para bancos relacionais.</p>

<p>Simplifica o tratamentos no banco de dados SQL, trazendo nossa preocupação mais para as regras de negócio.</p>

<p>O sequelize gera as queries SQL por baixo dos panos.</p>

<h3>O que é o Sequelize</h3>

<p>É uma ORM para nodejs. Baseada em promises (then, catch). Tem integração com vários bancos relacionais, como postegrees, sqlite, mysql (no nosso caso vamos usar mysql). Temos que criar um model, precisamos instalar o pacote pois é um módulo externo.</p>

<h3>Conexão com o Sequelize</h3>

<a href="">github - SEQUELIZE/CONEXÃO</a>

<h3>Criando o Model</h3>

<p>Como não temos queries nós não selecionamos tabelas, e para tanto, nós temos que criar um model, que irá representar uma tabela.</p>

<p>Vamos ter um model para cada tabela do nosso banco. Para representar a tabela "users" do banco nós criamos no sequelize o model "User" (isso serve para vermos como é o padrão de escrita no sequelize).</p>

<a href="">github - SEQUELIZE/MODELS</a>

<h3>Inserindo dados</h3>

<a href="">github - SEQUELIZE/INSERCAO-DADOS</a>

<h3>Lendo dados</h3>

<p>findAll retorna uma promise, então podemos utilizar os métodos then e catch para manipular seus retornos</p>

<a href="">github - SEQUELIZE/LEITURA-DADOS</a>

<h3>Utilizando WHERE</h3>

<P>Como já é sabido no SQL, o where filtra os dados do banco para atualizar ou deletar apenas aqueles que satisfaçam a condição do where. Utilizamos o método findOne do sequelize para isso.</P>

<p>O findOne retorna o primeiro registro que satisfaça à condição do where.</p>

<p>findOne retorna uma promise, então podemos utilizar os métodos then e catch para manipular seus retornos</p>

<a href="">github - SEQUELIZE/WHERE</a>

<h3>Removendo itens</h3>

