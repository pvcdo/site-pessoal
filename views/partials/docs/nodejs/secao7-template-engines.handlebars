
            <h2 id='template-engines'><span style="color:green"><i class="fab fa-node-js"></i> </span>Seção 7 -
                        Template Engines</h2>

                    <h3>O que é Template Engine?</h3>

                    <p>Template Engine (criador de template) é a definição de uma programação para definir o que será
                        exibido na view, ou seja, o que será construído no html</p>

                    <p>Através dessa ferramenta nós podemos inserir variáveis do back no front. Essencial para projetos
                        que usam banco de dados (ou seja, que não são estáticos).</p>

                    <p>Existem vários pacotes de programas para fazer o template engine.</p>

                    <p>Nós vamos utilizar o Handlebars.</p>

                    <h3>Handlebars</h3>

                    <p>A filosifia desse pacote é colocar menos lógica de programação na view.</p>

                    <p>Chaves duplas no html indica a utilização do Handlebars.</p>

                    <p>É um módulo dentro do express, embora ele também é utilizado tanto em outras frames de js quanto
                        em outras linguagens.</p>

                    <p>Para trabalhar com ele precisamos instalar o express e o handlebars através de <b>npm i express
                            express-handlebars</b>.</p>

                    <p>Os arquivos que anteriormente eram .html agora são .handlebars com as mesmas tags e forma de
                        escrever um documento html</p>

                    <p>Para utilizar o handlebars nós seguimos o padrão estabelecido em <a href="#">GitHub -
                            7_TEMPLATE_ENGINE\1-instalacao-handlebars</a></p>

                    <h3>Criando layouts</h3>

                    <p>Nesta etapa nós preparamos as páginas modelo (template) onde serão inseridos os dados
                        dinamicamente.</p>

                    <p>Para inserir os dados de um handlebars para o outro temos que utilizar no que vai receber os
                        dados a tag &#123;&#123;&#123;body&#125;&#125;&#125;</p>

                    <p><a href="#">GitHub - 7_TEMPLATE_ENGINE\2-criando-layouts</a></p>

                    <p><span style="color:red">OBS: a forma como estamos estruturando os diretórios no projeto do GitHub
                            estão seguindo o padrão handlebars, por isso não precisam de configurações especiais.</span>
                    </p>

                    <h3>Passando dados para a view</h3>

                    <p>Dentro do get nós podemos criar variáveis (ou receber dados do banco) que podem ser colocadas
                        como parâmetros do render e esses dados podem ser acessados na view de destino.</p>

                    <p><a href="#">GitHub - 7_TEMPLATE_ENGINE\3-dados-view</a></p>

                    <h3>Estruturas Condicionais</h3>

                    <p>Nós podemos usar dentro do .handlebars o comando &#123;&#123;#if 'condição'&#125;&#125; programação da condição ===
                        true &#123;&#123;/if&#125;&#125;</p>

                    <p>Para usar o else damos &#123;&#123;#if 'condição'&#125;&#125; programação da condição === true &#123;&#123;else&#125;&#125; programação
                        da condição === false &#123;&#123;/if&#125;&#125;</p>

                    <p><a href="#">GitHub - 7_TEMPLATE_ENGINE\4-if-else</a></p>

                    <h3>Estruturas de repetição</h3>

                    <p>Utilizamos o comando each para percorrer cada um dos itens de um array, sendo que cada item é
                        referenciado dentro da estrutura de repetição o comando this</p>

                    <p>&#123;&#123;#each 'array'&#125;&#125;</p>
                    <p>&nbsp;&nbsp;&nbsp;&nbsp;&#123;&#123;this&#125;&#125;</p>
                    <p>&#123;&#123;/each&#125;&#125;</p>

                    <p><a href="#">GitHub - 7_TEMPLATE_ENGINE\5-loop-each</a></p>

                    <h3>Utilizando with</h3>

                    <p>Simplifica a chamada de atributos de um objeto passado para o front.</p>

                    <p>No exemplo de <a href="#">GitHub - 7_TEMPLATE_ENGINE\6-with</a> temos o objeto post que é
                        exportado para a página blogpost.handlebars e nela, com o with nós encapsulamos todos os
                        atributos deste objeto.</p>

                    <p>&#123;&#123;#with 'objeto'&#125;&#125;</p>
                    <p>&nbsp;&nbsp;&nbsp;&nbsp;&#123;&#123;'atributo'&#125;&#125;</p>
                    <p>&#123;&#123;/with&#125;&#125;</p>

                    <h3>Partials</h3>

                    <p>Usado para criar como se fossem componentes de react.</p>

                    <p><a href="#">GitHub - 7_TEMPLATE_ENGINE\7-partials</a></p>

                    <h3>CSS com handlebars</h3>

                    <p>Inicialmente é igual ao <a href="#express-css">CSS com Express</a>, porém neste caso nós vamos
                        fazer o link do css no views/layouts/main.handlebars.</p>

                    <p><a href="#">GitHub - 7_TEMPLATE_ENGINE\8-css</a></p>

                    <p>Neste caso todos os documentos serão afetados pelo css que está no main.handlebars, uma vez que
                        todos os conteúdos estão sendo renderizados nesta página.</p>
